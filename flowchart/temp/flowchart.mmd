graph TD
	start1[Start]
	end2[End]
	expr3["'\nTest file to verify the fixed class subgraph behavior.\nClasses should be ..."]
	print6["print('Starting class subgraph test')"]
	assign7["simple = SimpleClass('test')"]
	method___init__8[["Constructor: __init__(name)"]]
	assign9["self.name = name"]
	assign10["self.value = 0"]
	print11["print(f'Created {name}')"]
	assign12["complex_obj = ComplexClass('hello world')"]
	method___init__13[["Constructor: __init__(data)"]]
	assign14["self.data = data"]
	assign15["self.processed = False"]
	print16["print('Initializing complex class')"]
	method_call17[["Call: simple.set_value(42)"]]
	method_set_value18[["Method: set_value(value)"]]
	assign19["self.value = value"]
	print20["print(f'Set value to {value}')"]
	return21["return self.value"]
	method_call22[["Call: complex_obj.process_data()"]]
	method_process_data23[["Method: process_data()"]]
	if_cond24{"If: not self.processed"}
	assign25["self.data = self.data.upper()"]
	assign26["self.processed = True"]
	print27["print('Data processed')"]
	assign28["result = complex_obj.get_result()"]
	method_get_result29[["Method: get_result()"]]
	return30["return self.data"]
	print31["print(f'Final result: {result}')"]
	print32["print('Class subgraph test completed')"]
subgraph "Function: main()"
    start1[Start]
    end2[End]
    expr3["'\nTest file to verify the fixed class subgraph behavior.\nClasses should be ..."]
    print6["print('Starting class subgraph test')"]
    assign7["simple = SimpleClass('test')"]
    assign12["complex_obj = ComplexClass('hello world')"]
    method_call17[["Call: simple.set_value(42)"]]
    method_call22[["Call: complex_obj.process_data()"]]
    assign28["result = complex_obj.get_result()"]
    print31["print(f'Final result: {result}')"]
    print32["print('Class subgraph test completed')"]
end
subgraph "Class: ComplexClass"
    subgraph "Method: __init__"
        method___init__13[["Constructor: __init__(data)"]]
        assign14["self.data = data"]
        assign15["self.processed = False"]
        print16["print('Initializing complex class')"]
    end
    subgraph "Method: get_result"
        method_get_result29[["Method: get_result()"]]
        return30["return self.data"]
    end
    subgraph "Method: process_data"
        method_process_data23[["Method: process_data()"]]
        if_cond24{"If: not self.processed"}
        assign25["self.data = self.data.upper()"]
        assign26["self.processed = True"]
        print27["print('Data processed')"]
    end
end
subgraph "Class: SimpleClass"
    subgraph "Method: __init__"
        method___init__8[["Constructor: __init__(name)"]]
        assign9["self.name = name"]
        assign10["self.value = 0"]
        print11["print(f'Created {name}')"]
    end
    subgraph "Method: set_value"
        method_set_value18[["Method: set_value(value)"]]
        assign19["self.value = value"]
        print20["print(f'Set value to {value}')"]
        return21["return self.value"]
    end
end
        start1 --> expr3
        expr3 --> print6
        print6 --> assign7
        assign7 -->|Call __init__| method___init__8
        method___init__8 --> assign9
        assign9 --> assign10
        assign10 --> print11
        assign7 --> assign12
        assign12 -->|Call __init__| method___init__13
        method___init__13 --> assign14
        assign14 --> assign15
        assign15 --> print16
        assign12 --> method_call17
        method_call17 -->|Execute| method_set_value18
        method_set_value18 --> assign19
        assign19 --> print20
        print20 --> return21
        return21 -->|Return| method_call17
        method_call17 --> method_call22
        method_call22 -->|Execute| method_process_data23
        method_process_data23 --> if_cond24
        if_cond24 --> assign25
        assign25 --> assign26
        assign26 --> print27
        method_call22 --> assign28
        assign28 -->|Execute| method_get_result29
        method_get_result29 --> return30
        return30 -->|Return| assign28
        assign28 --> print31
        print31 --> print32
        print32 --> end2

