{
  "name": "flowchart-machine",
  "displayName": "Python Flowchart Machine",
  "description": "An extension that generates flowcharts from Python code",
  "publisher": "LeonardoSouza",
  "author": {
    "name": "Leonardo de Souza Chaves",
    "email": "leonardo2sc@gmail.com"
  },
  "version": "1.0.2",
  "engines": {
    "vscode": "^1.99.3"
  },
  "license": "MIT",
  "keywords": [
    "python",
    "flowchart",
    "mermaid",
    "visualization",
    "diagram",
    "code analysis"
  ],
  "categories": [
    "Other",
    "Programming Languages",
    "Visualization"
  ],
  "icon": "media/icon.png",
  "galleryBanner": {
    "color": "#0B1220",
    "theme": "dark"
  },
  "activationEvents": [
    "onCommand:extension.generateFlowchart",
    "onCommand:extension.generateFlowchartAtCursor",
    "onLanguage:python"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "extension.generateFlowchart",
        "title": "Generate Python Flowchart",
        "category": "Flowchart"
      },
      {
        "command": "extension.generateFlowchartAtCursor",
        "title": "Generate Flowchart at the Cursor",
        "category": "Flowchart"
      },
      {
        "command": "flowchartMachine.config.openSettings",
        "title": "Open Flowchart Machine Settings",
        "category": "Flowchart"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "extension.generateFlowchart",
          "when": "editorLangId == python"
        },
        {
          "command": "extension.generateFlowchartAtCursor",
          "when": "editorLangId == python"
        }
      ],
      "editor/context": [
        {
          "command": "extension.generateFlowchartAtCursor",
          "when": "editorLangId == python",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "title": "Flowchart Machine",
      "properties": {
        "flowchartMachine.general.autoSave": {
          "type": "boolean",
          "default": true,
          "description": "Automatically save flowcharts after generation"
        },
        "flowchartMachine.nodes.processTypes.prints": {
          "type": "boolean",
          "default": true,
          "description": "Process print statements"
        },
        "flowchartMachine.nodes.processTypes.functions": {
          "type": "boolean",
          "default": true,
          "description": "Process function definitions"
        },
        "flowchartMachine.nodes.processTypes.forLoops": {
          "type": "boolean",
          "default": true,
          "description": "Process for loops"
        },
        "flowchartMachine.nodes.processTypes.whileLoops": {
          "type": "boolean",
          "default": true,
          "description": "Process while loops"
        },
        "flowchartMachine.nodes.processTypes.variables": {
          "type": "boolean",
          "default": true,
          "description": "Process variable assignments"
        },
        "flowchartMachine.nodes.processTypes.ifs": {
          "type": "boolean",
          "default": true,
          "description": "Process if/elif/else statements"
        },
        "flowchartMachine.nodes.processTypes.returns": {
          "type": "boolean",
          "default": true,
          "description": "Process return statements"
        },
        "flowchartMachine.nodes.processTypes.imports": {
          "type": "boolean",
          "default": false,
          "description": "Process import statements"
        },
        "flowchartMachine.nodes.processTypes.classes": {
          "type": "boolean",
          "default": true,
          "description": "Process class definitions"
        },
        "flowchartMachine.nodes.processTypes.mergeCommonNodes": {
          "type": "boolean",
          "default": true,
          "description": "Merge common nodes"
        },
        "flowchartMachine.nodes.processTypes.exceptions": {
          "type": "boolean",
          "default": true,
          "description": "Process try/except/finally blocks"
        },
        "flowchartMachine.connectionView.inboundDepth": {
          "type": "number",
          "minimum": 0,
          "maximum": 5,
          "default": 3,
          "description": "Maximum caller depth to include in the connection view"
        },
        "flowchartMachine.connectionView.outboundDepth": {
          "type": "number",
          "minimum": 0,
          "maximum": 6,
          "default": 4,
          "description": "Maximum callee depth to include in the connection view"
        },
        "flowchartMachine.storage.maxSavedFlowcharts": {
          "type": "number",
          "minimum": 1,
          "maximum": 200,
          "default": 50,
          "description": "Maximum number of saved flowcharts to keep"
        },
        "flowchartMachine.storage.storageLocation": {
          "type": "string",
          "enum": ["workspace", "global"],
          "default": "workspace",
          "description": "Storage location for saved flowcharts"
        },
        "flowchartMachine.storage.export.useCustomPngLocation": {
          "type": "boolean",
          "default": false,
          "description": "Use custom PNG download location instead of Downloads folder"
        },
        "flowchartMachine.storage.export.defaultPngLocation": {
          "type": "string",
          "default": "",
          "description": "Default directory for PNG exports (leave empty for Downloads folder)"
        }
      }
    }
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Leonardo8133/flowchart-machine"
  },
  "bugs": {
    "url": "https://github.com/Leonardo8133/flowchart-machine/issues"
  },
  "homepage": "https://github.com/Leonardo8133/flowchart-machine/#readme",
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test",
    "test:unit": "vscode-test --extensionDevelopmentPath=. --extensionTestsPath=./out/test/suite/index --no-exit",
    "test:watch": "vscode-test --extensionDevelopmentPath=. --extensionTestsPath=./out/test/suite/index --watch",
    "test:coverage": "npm run compile && npm run test:unit",
    "test:clean": "rimraf test-workspace*",
    "test:all": "npm run pretest && npm run test:unit"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.99.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.25.1",
    "rimraf": "^5.0.5",
    "typescript": "^5.8.3"
  }
}
